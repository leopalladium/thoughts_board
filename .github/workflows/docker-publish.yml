name: Docker CI/CD

on:
  push:
    branches: [ "master" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  # Image name will be ghcr.io/YOUR_LOGIN/YOUR_REPOSITORY
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================================
  # JOB #1: Build and Push Docker Images
  # ===============================================
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for keyless signing with Cosign

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Build Backend Image ---
      - name: Extract Docker metadata for backend
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend

      - name: Build and push backend Docker image
        id: build-and-push-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Build Frontend Image ---
      - name: Extract Docker metadata for frontend
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend

      - name: Build and push frontend Docker image
        id: build-and-push-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-app
          file: ./frontend-app/Dockerfile.frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- (Optional) Sign Images ---
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign the backend image
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "${{ steps.meta_backend.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-backend.outputs.digest }}

      - name: Sign the frontend image
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "${{ steps.meta_frontend.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-frontend.outputs.digest }}

  # ===============================================
  # JOB #2: Deploy to Server
  # ===============================================
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
  
    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.3 # Можно использовать и @master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Прерывать скрипт при любой ошибке
            set -e
            
            echo ">>> Переход в директорию проекта..."
            cd ~/thoughts
            
            echo ">>> Логин в GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            echo ">>> Определение тега и полных имен образов..."
            IMAGE_TAG="sha-$(echo ${{ github.sha }} | cut -c1-7)"
            BACKEND_IMAGE="ghcr.io/${{ github.repository }}-backend:${IMAGE_TAG}"
            FRONTEND_IMAGE="ghcr.io/${{ github.repository }}-frontend:${IMAGE_TAG}"
            echo "Новый образ бэкенда: $BACKEND_IMAGE"
            
            echo ">>> Обновление docker-compose.yml..."
            # ФИНАЛЬНАЯ, НАДЕЖНАЯ КОМАНДА SED
            # Она находит блок 'backend:', и внутри него заменяет любую строку, начинающуюся с 'image:'
            sed -i "/backend:/,/container_name:/ s#^\s*image:.*#    image: $BACKEND_IMAGE#" docker-compose.yml
            sed -i "/frontend:/,/container_name:/ s#^\s*image:.*#    image: $FRONTEND_IMAGE#" docker-compose.yml
            
            echo ">>> Проверка содержимого файла после замены:"
            cat docker-compose.yml
  
            echo ">>> Скачивание новых образов..."
            docker compose pull
            
            echo ">>> Перезапуск сервисов..."
            docker compose up -d --no-deps backend frontend
            
            echo ">>> Очистка старых образов..."
            docker image prune -a -f
            
            echo "✅✅✅ Деплой успешно завершен! Поздравляю! ✅✅✅"
