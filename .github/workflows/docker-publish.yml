name: Docker CI/CD

on:
  push:
    branches: [ "master" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  # Имя образа будет ghcr.io/ВАШ_ЛОГИН/ВАШ_РЕПОЗИТОРИЙ-backend (и -frontend)
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================================
  # ЗАДАЧА №1: Сборка и публикация Docker-образов
  # ===============================================
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Сборка Backend образа ---
      - name: Extract Docker metadata for backend
        id: meta_backend
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend

      - name: Build and push backend Docker image
        id: build-and-push-backend
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: ./Dockerfile.backend # Указываем правильный Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Сборка Frontend образа ---
      - name: Extract Docker metadata for frontend
        id: meta_frontend
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend

      - name: Build and push frontend Docker image
        id: build-and-push-frontend
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./frontend-app # Указываем контекст для фронтенда
          file: ./frontend-app/Dockerfile.frontend # Указываем правильный Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Подписание образов (опционально, можно удалить, если не нужно)
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0

      - name: Sign the backend image
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "${{ steps.meta_backend.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-backend.outputs.digest }}

      - name: Sign the frontend image
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "${{ steps.meta_frontend.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-frontend.outputs.digest }}
  # ===============================================
  # ЗАДАЧА №2: Развертывание на сервере
  # ===============================================
  deploy:
    # Запускать эту задачу только после успешной сборки
    needs: build
    runs-on: ubuntu-latest
    
    # Запускать деплой только при push в master или по тегу, НЕ для pull-request
    if: github.event_name == 'push'

    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Переходим в папку проекта
            cd ~/thoughts
            
            # Логинимся в GitHub Container Registry с помощью Personal Access Token
            # Убедитесь, что секрет GHCR_PAT создан в настройках репозитория!
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Динамически обновляем docker-compose.yml новыми образами
            # Это надежнее, чем использовать теги
            sed -i 's|image: ghcr.io/.*-backend:.*|image: ${{ needs.build.outputs.backend_image }}|' docker-compose.yml
            sed -i 's|image: ghcr.io/.*-frontend:.*|image: ${{ needs.build.outputs.frontend_image }}|' docker-compose.yml
            
            # Скачиваем новые версии образов
            docker compose pull
            
            # Перезапускаем только обновленные сервисы
            docker compose up -d --no-deps backend frontend
            
            # Очищаем старые, неиспользуемые образы
            docker image prune -a -f
