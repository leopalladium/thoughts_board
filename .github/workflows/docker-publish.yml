name: Docker CI/CD

on:
  push:
    branches: [ "master" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  # Image name will be ghcr.io/YOUR_LOGIN/YOUR_REPOSITORY
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================================
  # JOB #1: Build and Push Docker Images
  # ===============================================
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for keyless signing with Cosign

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Build Backend Image ---
      - name: Extract Docker metadata for backend
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend

      - name: Build and push backend Docker image
        id: build-and-push-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Build Frontend Image ---
      - name: Extract Docker metadata for frontend
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend

      - name: Build and push frontend Docker image
        id: build-and-push-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-app
          file: ./frontend-app/Dockerfile.frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- (Optional) Sign Images ---
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign the backend image
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "${{ steps.meta_backend.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-backend.outputs.digest }}

      - name: Sign the frontend image
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "${{ steps.meta_frontend.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push-frontend.outputs.digest }}

  # ===============================================
  # JOB #2: Deploy to Server
  # ===============================================
  deploy:
    # This job MUST be at the same indentation level as the 'build' job
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Only run on push events

    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.3 # Pinned to a specific version for stability
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            
            cd ~/thoughts
            
            echo "Logging into GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Determine the image tag based on the Git reference
            # If it's a tag like v1.2.3, use that. Otherwise, use the short commit SHA.
            if [[ "${{ github.ref_type }}" == "tag" ]]; then
              IMAGE_TAG="${{ github.ref_name }}"
            else
              IMAGE_TAG="sha-$(echo ${{ github.sha }} | cut -c1-7)"
            fi
            
            echo "Using image tag: $IMAGE_TAG"
            
            BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${IMAGE_TAG}"
            FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${IMAGE_TAG}"
            
            echo "Updating docker-compose.yml..."
            # Using '#' as a separator for sed to avoid conflicts with '/' in the image name
            sed -i "s#image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:.*#image: $BACKEND_IMAGE#" docker-compose.yml
            sed -i "s#image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:.*#image: $FRONTEND_IMAGE#" docker-compose.yml
            
            echo "Pulling new images..."
            docker compose pull
            
            echo "Restarting services..."
            docker compose up -d --no-deps backend frontend
            
            echo "Pruning old images..."
            docker image prune -a -f
            
            echo "Deployment successful!"
