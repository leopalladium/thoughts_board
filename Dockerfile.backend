FROM python:3.11-slim-bullseye AS builder

ENV POETRY_VERSION=2.1.3
ENV POETRY_HOME="/opt/poetry"
ENV POETRY_VIRTUALENVS_CREATE=true
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV PATH="$POETRY_HOME/bin:$PATH"
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

RUN echo 'Acquire::Retries "8";' > /etc/apt/apt.conf.d/80retries && \
    echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90assumeyes

RUN echo 'deb http://deb.debian.org/debian bullseye main' > /etc/apt/sources.list && \
    echo 'deb http://security.debian.org/debian-security bullseye-security main' >> /etc/apt/sources.list && \
    echo 'deb http://deb.debian.org/debian bullseye-updates main' >> /etc/apt/sources.list && \
    echo 'deb http://archive.debian.org/debian bullseye main' >> /etc/apt/sources.list # Архивный репозиторий

RUN set -eux; \
    cmd_failed_update=false; \
    for i in $(seq 1 5); do \
        if apt-get update; then cmd_failed_update=false; break; else cmd_failed_update=true; fi; \
        echo "APT update failed (attempt $i), retrying in 15s..."; \
        sleep 15; \
    done; \
    if [ "$cmd_failed_update" = true ]; then echo "APT update failed after all retries."; exit 1; fi; \
    \
    cmd_failed_install=false; \
    for i in $(seq 1 5); do \
        if apt-get install -y --no-install-recommends \
            build-essential \
            libpq-dev \
            curl \
            ca-certificates; then cmd_failed_install=false; break; else cmd_failed_install=true; fi; \
        echo "APT install failed (attempt $i), retrying in 15s..."; \
        sleep 15; \
    done; \
    if [ "$cmd_failed_install" = true ]; then echo "APT install failed after all retries."; exit 1; fi; \
    \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*

RUN set -eux; \
    cmd_failed=false; \
    for i in $(seq 1 5); do \
        if curl -sSL https://install.python-poetry.org | python3 - ; then cmd_failed=false; break; else cmd_failed=true; fi; \
        echo "Poetry installation failed (attempt $i), retrying in 10s..."; \
        sleep 10; \
    done; \
    if [ "$cmd_failed" = true ]; then echo "Poetry installation failed after all retries."; exit 1; fi

WORKDIR /app

COPY poetry.lock pyproject.toml ./

RUN set -eux; \
    cmd_failed=false; \
    for i in $(seq 1 3); do \
        if poetry install --no-dev --no-interaction --no-ansi; then cmd_failed=false; break; else cmd_failed=true; fi; \
        echo "Poetry dependency installation failed (attempt $i), retrying in 15s..."; \
        sleep 15; \
    done; \
    if [ "$cmd_failed" = true ]; then echo "Poetry dependency installation failed after all retries."; exit 1; fi

COPY main.py .

FROM python:3.11-slim-bullseye AS final

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV APP_HOME=/app
ENV PATH="$APP_HOME/.venv/bin:$PATH"

WORKDIR $APP_HOME

RUN echo 'Acquire::Retries "8";' > /etc/apt/apt.conf.d/80retries && \
    echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90assumeyes

RUN set -eux; \
    cmd_failed_update=false; \
    for i in $(seq 1 5); do \
        if apt-get update; then cmd_failed_update=false; break; else cmd_failed_update=true; fi; \
        echo "APT update failed (attempt $i), retrying in 15s..."; \
        sleep 15; \
    done; \
    if [ "$cmd_failed_update" = true ]; then echo "APT update failed after all retries."; exit 1; fi; \
    \
    cmd_failed_install=false; \
    for i in $(seq 1 5); do \
        if apt-get install -y --no-install-recommends \
            libpq5 \
            ca-certificates; then cmd_failed_install=false; break; else cmd_failed_install=true; fi; \
        echo "APT install failed (attempt $i), retrying in 15s..."; \
        sleep 15; \
    done; \
    if [ "$cmd_failed_install" = true ]; then echo "APT install failed after all retries."; exit 1; fi; \
    \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*

COPY --from=builder $APP_HOME/.venv $APP_HOME/.venv

COPY --from=builder $APP_HOME/main.py $APP_HOME/main.py

RUN groupadd --system app && useradd --system --gid app appuser
RUN chown -R appuser:app $APP_HOME
USER appuser

EXPOSE 8000

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]