# Base image
FROM python:3.11-slim-bullseye AS base

# Environment variables setup
ENV POETRY_VERSION=1.8.3
ENV POETRY_HOME="/opt/poetry"
ENV POETRY_VIRTUALENVS_CREATE=true
ENV PATH="$POETRY_HOME/bin:$PATH"
ENV DEBIAN_FRONTEND=noninteractive

# Set up APT for better resilience
RUN echo 'Acquire::Retries "8";' > /etc/apt/apt.conf.d/80retries && \
    echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90assumeyes

# Configure multiple mirrors to increase chance of successful download
RUN echo 'deb http://deb.debian.org/debian bullseye main' > /etc/apt/sources.list && \
    echo 'deb http://security.debian.org/debian-security bullseye-security main' >> /etc/apt/sources.list && \
    echo 'deb http://deb.debian.org/debian bullseye-updates main' >> /etc/apt/sources.list && \
    echo 'deb http://archive.debian.org/debian bullseye main' >> /etc/apt/sources.list

# Install system dependencies with enhanced error handling
RUN set -eux && \
    for i in $(seq 1 5); do \
        apt-get update && break || sleep 15; \
    done && \
    for i in $(seq 1 5); do \
        apt-get install -y --no-install-recommends \
            build-essential \
            libpq-dev \
            curl \
            ca-certificates \
            && break || sleep 15; \
    done && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Poetry with retry mechanism
RUN for i in $(seq 1 5); do \
        curl -sSL https://install.python-poetry.org | python3 - && break || sleep 10; \
    done

# Set working directory
WORKDIR /app

# Copy Poetry configuration files
COPY poetry.lock pyproject.toml ./

# Install project dependencies with retry mechanism
RUN for i in $(seq 1 3); do \
        poetry install --no-interaction --no-ansi && break || sleep 15; \
    done

# Copy application code
COPY main.py .

# Expose port for the FastAPI application
EXPOSE 8000

# Command to run the application
CMD ["poetry", "run", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
