FROM python:3.11-slim-bullseye AS builder

ENV POETRY_VERSION=2.1.3 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_CREATE=true \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    PATH="$POETRY_HOME/bin:$PATH" \
    DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1

WORKDIR /app

# Configure apt and define install function
RUN echo 'Acquire::Retries "8";' > /etc/apt/apt.conf.d/80retries && \
    echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90assumeyes && \
    echo 'deb http://deb.debian.org/debian bullseye main' > /etc/apt/sources.list && \
    echo 'deb http://security.debian.org/debian-security bullseye-security main' >> /etc/apt/sources.list && \
    echo 'deb http://deb.debian.org/debian bullseye-updates main' >> /etc/apt/sources.list && \
    echo 'deb http://archive.debian.org/debian bullseye main' >> /etc/apt/sources.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends build-essential libpq-dev curl ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install poetry with retry logic
RUN set -e && \
    for i in $(seq 1 3); do \
        echo "Installing Poetry (attempt $i/3)..." && \
        if curl -sSL https://install.python-poetry.org | python3 -; then \
            break; \
        elif [ $i -eq 3 ]; then \
            echo "Poetry installation failed after 3 attempts" && exit 1; \
        else \
            echo "Retrying in 5s..." && sleep 5; \
        fi; \
    done

# Install dependencies
COPY poetry.lock pyproject.toml ./
RUN poetry install --no-dev --no-interaction --no-ansi

# Copy application code
COPY main.py .

# Final stage
FROM python:3.11-slim-bullseye AS final

ENV PYTHONUNBUFFERED=1 \
    APP_HOME=/app \
    PATH="/app/.venv/bin:$PATH"

WORKDIR $APP_HOME

# Install runtime dependencies only
RUN apt-get update && \
    apt-get install -y --no-install-recommends libpq-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    groupadd --system app && \
    useradd --system --gid app appuser

# Copy virtual environment and application code
COPY --from=builder $APP_HOME/.venv $APP_HOME/.venv
COPY --from=builder $APP_HOME/main.py $APP_HOME/main.py

# Set permissions and user
RUN chown -R appuser:app $APP_HOME
USER appuser

EXPOSE 8000

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
