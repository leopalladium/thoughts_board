# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy project files
COPY . .

# Check build directory structure before building
RUN echo "Current directory structure:" && ls -la

# Build the application
RUN npm run build

# Create a standard output directory regardless of build tool used
RUN mkdir -p /app/output && \
    if [ -d "build" ]; then \
        echo "Found /app/build directory" && \
        cp -r build/* /app/output/; \
    elif [ -d "dist" ]; then \
        echo "Found /app/dist directory" && \
        cp -r dist/* /app/output/; \
    elif [ -d "out" ]; then \
        echo "Found /app/out directory" && \
        cp -r out/* /app/output/; \
    else \
        echo "No standard build directory found. Using current directory" && \
        find . -maxdepth 1 -type f -name "*.html" -o -name "*.js" -o -name "*.css" | xargs -I{} cp {} /app/output/; \
    fi && \
    echo "Contents of output directory:" && \
    ls -la /app/output/

# Deployment stage
FROM nginx:1.25-alpine

# Copy built files to nginx from the standardized output directory
COPY --from=builder /app/output /usr/share/nginx/html

# Create default nginx configuration
RUN cat <<EOF > /etc/nginx/conf.d/default.conf
server {
    listen 80;
    server_name localhost;
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files \$uri \$uri/ /index.html;
    }
}
EOF

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
